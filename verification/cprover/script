#!/bin/bash

doit() {
  printf "** $*"
  LAST=${@: -1}

  start=`perl -MTime::HiRes=time -e 'printf "%.9f\n", time'`
  ./doit $* > logs/${LAST}.log 2>&1
  RESULT=$?
  end=`perl -MTime::HiRes=time -e 'printf "%.9f\n", time'`

  if [ $RESULT -eq 0 ] ; then
    printf ' \e[32mOK\e[0m'
  elif [ $RESULT -eq 10 ] ; then
    printf ' \e[31mREFUTED\e[0m'
  else
    printf ' \e[1;31mERROR\e[0m'
  fi

  runtime=$( echo "$end - $start" | bc -l )
  printf " %f" $runtime

  printf '\n'
}

skip() {
  printf "** $*"
  printf ' \e[37mSKIPPED\e[0m'
  printf '\n'
}

if [ ! -e logs/. ] ; then mkdir logs ; fi

# source/allocator.c
doit source/allocator.c aws_mem_acquire
doit source/allocator.c aws_mem_acquire_many
doit source/allocator.c aws_mem_calloc
doit source/allocator.c aws_mem_realloc

# source/allocator_sba.c
doit source/allocator_sba.c aws_small_block_allocator_bytes_active
doit source/allocator_sba.c aws_small_block_allocator_bytes_reserved
skip source/allocator_sba.c aws_small_block_allocator_new

# source/bus.c
doit source/bus.c s_bus_destroy_listener_list

# source/byte_buf.c
doit source/byte_buf.c aws_array_eq_c_str
doit source/byte_buf.c aws_array_eq_c_str_ignore_case
doit source/byte_buf.c aws_array_eq_ignore_case
doit source/byte_buf.c aws_byte_buf_advance
doit source/byte_buf.c aws_byte_buf_append_with_lookup
doit source/byte_buf.c aws_byte_buf_cat
doit source/byte_buf.c aws_byte_buf_init
skip source/byte_buf.c aws_byte_buf_init_cache_and_update_cursors
doit source/byte_buf.c aws_byte_buf_init_copy
doit source/byte_buf.c aws_byte_buf_init_copy_from_cursor
doit source/byte_buf.c aws_byte_buf_reserve
doit source/byte_buf.c aws_byte_buf_reserve_relative
doit source/byte_buf.c aws_byte_cursor_compare_lookup
skip source/byte_buf.c aws_byte_cursor_find_exact
doit source/byte_buf.c aws_byte_cursor_left_trim_pred
doit source/byte_buf.c aws_byte_cursor_next_split
doit source/byte_buf.c aws_byte_cursor_right_trim_pred
skip source/byte_buf.c aws_byte_cursor_split_on_char_n
doit source/byte_buf.c aws_hash_array_ignore_case

# source/cache.c

# source/codegen.c
doit source/codegen.c aws_array_list_clean_up
doit source/codegen.c aws_array_list_clean_up_secure
doit source/codegen.c aws_array_list_init_dynamic
doit source/codegen.c aws_is_mem_zeroed
doit source/codegen.c aws_linked_list_is_valid_deep
doit source/codegen.c aws_linked_list_node_reset
doit source/codegen.c aws_text_detect_encoding

# source/command_line_parser.c
skip source/command_line_parser.c source/byte_buf.c aws_cli_dispatch_on_subcommand

# source/common.c

# source/condition_variable.c
doit source/condition_variable.c aws_condition_variable_wait_for_pred
doit source/condition_variable.c aws_condition_variable_wait_pred

# source/date_time.c
skip source/date_time.c aws_date_time_init_from_str
skip source/date_time.c aws_date_time_init_from_str_cursor
doit source/date_time.c s_get_time_struct

# source/device_random.c

# source/encoding.c
skip source/encoding.c aws_base64_decode
skip source/encoding.c aws_base64_encode
skip source/encoding.c aws_hex_decode
skip source/encoding.c aws_hex_encode
skip source/encoding.c aws_hex_encode_append_dynamic

# source/error.c

# source/fifo_cache.c

# source/file.c
skip source/file.c source/allocator.c source/byte_buf.c aws_byte_buf_init_from_file
doit source/file.c aws_directory_entry_iterator_destroy

# source/hash_table.c
skip source/hash_table.c aws_hash_byte_cursor_ptr
doit source/hash_table.c aws_hash_callback_c_str_eq
doit source/hash_table.c aws_hash_callback_string_eq
doit source/hash_table.c aws_hash_iter_begin
skip source/hash_table.c aws_hash_string
doit source/hash_table.c aws_hash_table_clear
skip source/hash_table.c aws_hash_table_eq
skip source/hash_table.c aws_hash_table_find
skip source/hash_table.c aws_hash_table_foreach
skip source/hash_table.c aws_hash_table_init
doit source/hash_table.c aws_hash_table_move
skip source/hash_table.c aws_hash_table_remove
doit source/hash_table.c aws_hash_table_remove_element

# source/json.c

# source/lifo_cache.c

# source/linked_hash_table.c
doit source/linked_hash_table.c aws_linked_hash_table_clean_up

# source/log_channel.c

# source/log_formatter.c

# source/log_writer.c

# source/logging.c
doit source/logging.c aws_log_level_to_string
doit source/logging.c aws_string_to_log_level
doit source/logging.c aws_thread_id_t_to_string

# source/lru_cache.c

# source/math.c
doit source/math.c aws_add_size_checked_varargs

# source/memtrace.c
skip source/memtrace.c aws_mem_tracer_dump
doit source/memtrace.c aws_mem_tracer_new

# source/priority_queue.c
doit source/priority_queue.c aws_priority_queue_backpointers_valid_deep
skip source/priority_queue.c aws_priority_queue_init_dynamic
doit source/priority_queue.c aws_priority_queue_init_static
skip source/priority_queue.c aws_priority_queue_pop
skip source/priority_queue.c aws_priority_queue_remove
doit source/priority_queue.c aws_priority_queue_top

# source/process_common.c
doit source/process_common.c aws_run_command
doit source/process_common.c aws_run_command_result_init

# source/promise.c

# source/ref_count.c

# source/ring_buffer.c
doit source/ring_buffer.c aws_ring_buffer_acquire
doit source/ring_buffer.c aws_ring_buffer_clean_up
doit source/ring_buffer.c aws_ring_buffer_init
doit source/ring_buffer.c aws_ring_buffer_release

# source/statistics.c

# source/string.c
doit source/string.c aws_secure_strlen
doit source/string.c source/allocator.c aws_string_new_from_array

# source/task_scheduler.c
doit source/task_scheduler.c aws_task_init
skip source/task_scheduler.c aws_task_scheduler_clean_up
doit source/task_scheduler.c aws_task_scheduler_init
doit source/task_scheduler.c aws_task_scheduler_schedule_future

# source/thread_scheduler.c
doit source/thread_scheduler.c aws_thread_scheduler_cancel_task

# source/thread_shared.c
skip source/thread_shared.c aws_thread_join_all_managed

# source/uuid.c
doit source/uuid.c aws_uuid_init_from_str
doit source/uuid.c aws_uuid_to_str

# source/xml_parser.c
skip source/xml_parser.c aws_xml_node_traverse
skip source/xml_parser.c aws_xml_parser_parse
doit source/xml_parser.c s_advance_to_closing_tag
skip source/xml_parser.c s_node_next_sibling
